#include <Wire.h>
#include <LSM303.h>

#define ENA 6
#define IN1 11
#define IN2 10
#define IN3 9
#define IN4 8
#define ENB 7

#define THRESHOLD_ANGLE 10

LSM303 compass; // 여기서 변수가 정의되어야 함

float heading_angle = 0.0;
float init_heading_angle = 17.0; // 초기 방향
float target_heading_angle = 90;
float heading_angle_error = 0.0; // error 값

void setup()
{
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);
  Serial.begin(115200);

  Wire.begin(); // IMU initialize
  compass.init();
  compass.enableDefault();

  /*
     Calibration values; the default values of +/-32767 for each axis
     lead to an assumed magnetometer bias of 0. Use the Calibrate example
     program to determine appropriate values for your particular unit.
  */
  compass.m_min = (LSM303::vector<int16_t>){-32767, -32767, -32767};
  compass.m_max = (LSM303::vector<int16_t>){+32767, +32767, +32767};
}

void motor_L_control(int speed)
{
  if (speed >= 0)
  {
    digitalWrite(IN1, HIGH); // 전진과 후진의 방향을 바꿈
    digitalWrite(IN2, LOW);
    analogWrite(ENA, speed); // 0-255
  }
  else
  {
    digitalWrite(IN1, LOW); // 전진과 후진의 방향을 바꿈
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, -speed);
  }
}

void motor_R_control(int speed)
{
  if (speed >= 0)
  {
    digitalWrite(IN3, HIGH); // 전진과 후진의 방향을 바꿈
    digitalWrite(IN4, LOW);
    analogWrite(ENB, speed); // 0-255
  }
  else
  {
    digitalWrite(IN3, LOW); // 전진과 후진의 방향을 바꿈
    digitalWrite(IN4, HIGH);
    analogWrite(ENB, -speed);
  }
}

void imu_rotation(void)
{
  compass.read();
  float heading1 = compass.heading();
  compass.read();
  float heading2 = compass.heading();
  float heading = (heading1 + heading2) / 2;

  heading = fmod(heading + 180, 360); // IMU 방향 반전

  Serial.println(heading);

  heading_angle_error = target_heading_angle - heading;

  if (heading_angle_error > 180)
  {
    heading_angle_error = heading_angle_error - 360;
  }
  else if (heading_angle_error < -180)
  {
    heading_angle_error = heading_angle_error + 360;
  }
  else
  {
    // Nothing to do
  }

  Serial.print("Heading Angle Error : ");
  Serial.print(heading_angle_error); // heading angle error 표시
  Serial.print(" = ");
  Serial.print(target_heading_angle);
  Serial.print(" = ");
  Serial.println(heading); // heading angle 표시

  if (heading_angle_error > THRESHOLD_ANGLE) // 반시계방향으로 회전
  {
    motor_R_control(-70);
    motor_L_control(70);
  }
  else if ((heading_angle_error >= -THRESHOLD_ANGLE) && (heading_angle_error <= THRESHOLD_ANGLE)) // 정지
  {
    motor_R_control(0);
    motor_L_control(0);
  }
  else // heading_angle_error < -2 // 시계방향으로 회전
  {
    motor_R_control(70);
    motor_L_control(-70);
  }
}

void loop()
{
  imu_rotation();
}
