#include <NewPing.h>

// 초음파 센서의 수와 최대 측정 거리, 벽과의 거리 및 벽과의 절반 거리를 정의
#define SONAR_NUM 3
#define MAX_DISTANCE 100
#define WALL_GAP_DISTANCE 400
#define WALL_GAP_DISTANCE_HALF 155

// 초음파 센서의 인덱스를 정의
#define Front 0
#define Left  1 
#define Right 2

// 초음파 센서의 Trig와 Echo 핀 번호를 정의
#define TRIG1 14
#define ECHO1 15
#define TRIG2 16
#define ECHO2 17
#define TRIG3 18
#define ECHO3 19

// NewPing 라이브러리를 사용하여 초음파 센서를 초기화
NewPing sonar[SONAR_NUM] = {   
    NewPing(TRIG1, ECHO1, MAX_DISTANCE), 
    NewPing(TRIG2, ECHO2, MAX_DISTANCE),
    NewPing(TRIG3, ECHO3, MAX_DISTANCE)
};

// 모터 제어 핀을 정의
#define IN1 11
#define IN2 10
#define ENA 6
#define IN3 9
#define IN4 8
#define ENB 7

// 초음파 센서로 측정된 거리 값을 저장하는 변수
float front_sonar = 0.0;
float left_sonar  = 0.0;
float right_sonar = 0.0;

int maze_status = 0; // 미로 상태를 저장하는 변수

void setup() {
  // 초음파 센서 핀을 출력 또는 입력 모드로 설정
  pinMode(TRIG1, OUTPUT);
  pinMode(ECHO1, INPUT);
  pinMode(TRIG2, OUTPUT);
  pinMode(ECHO2, INPUT);
  pinMode(TRIG3, OUTPUT);
  pinMode(ECHO3, INPUT);

  // 모터 제어 핀을 출력 모드로 설정
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);

  Serial.begin(115200); // 시리얼 통신 속도를 115200으로 설정
}

// 모터 A를 제어하는 함수
void motor_A_control(int direction_a, int motor_speed_a) {
  if (direction_a == HIGH) {
    digitalWrite(IN1, HIGH); // 모터의 방향 설정
    digitalWrite(IN2, LOW);
    analogWrite(ENA, motor_speed_a); // 모터의 속도 설정
  } else {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, motor_speed_a);
  }
}

// 모터 B를 제어하는 함수
void motor_B_control(int direction_b, int motor_speed_b) {
  if (direction_b == HIGH) {
    digitalWrite(IN3, HIGH); // 모터의 방향 설정
    digitalWrite(IN4, LOW);
    analogWrite(ENB, motor_speed_b); // 모터의 속도 설정
  } else {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB, motor_speed_b);
  }
}

// 미로 상태를 확인하는 함수
void check_maze_status(void) {
  // 센서 값에 따라 미로 상태를 설정
  if ((left_sonar >= 0) && (left_sonar <= WALL_GAP_DISTANCE) && 
      (right_sonar >= 0) && (right_sonar <= WALL_GAP_DISTANCE) && 
      (front_sonar >= 0) && (front_sonar <= WALL_GAP_DISTANCE_HALF)) { 
    maze_status = 4;
    Serial.println("maze_status = 4"); // 전방에 벽이 있는 상태
  } else if ((left_sonar >= 0) && (left_sonar <= WALL_GAP_DISTANCE) && 
             (right_sonar >= 0) && (right_sonar <= WALL_GAP_DISTANCE) && 
             (front_sonar >= WALL_GAP_DISTANCE_HALF)) {
    maze_status = 1;
    Serial.println("maze_status = 1"); // 전방에 벽이 없는 상태
  } else if ((left_sonar >= 0) && (left_sonar <= WALL_GAP_DISTANCE) && 
             (front_sonar >= 0) && (front_sonar <= WALL_GAP_DISTANCE_HALF)) {
    maze_status = 2;
    Serial.println("maze_status = 2"); // 좌측에 벽이 있고 전방에 벽이 있는 상태
  } else if ((right_sonar >= 0) && (right_sonar <= WALL_GAP_DISTANCE) && 
             (front_sonar >= 0) && (front_sonar <= WALL_GAP_DISTANCE_HALF)) {
    maze_status = 3;
    Serial.println("maze_status = 3"); // 우측에 벽이 있고 전방에 벽이 있는 상태
  } else {
    maze_status = 0;
    Serial.println("maze_status = 0"); // 기본 상태
  }
}

// 벽 충돌을 피하면서 주행하는 함수
void wall_collision_avoid(int base_speed) {
  float error = 0.0;
  float Kp = 1.5; 
  int pwm_control = 0;
  int right_pwm = 0;
  int left_pwm  = 0;
  error = (right_sonar - left_sonar);
  error = Kp * error;  
  
  if (error >= 50) error = 50;
  if (error <= -50) error = -50; 
                       
  right_pwm = base_speed - error;
  left_pwm  = base_speed + error;
  
  if (right_pwm <= 0) right_pwm = 0;
  if (left_pwm  <= 0) left_pwm  = 0;

  if (right_pwm >= 120) right_pwm = 120;
  if (left_pwm  >= 80) left_pwm  = 80;
  
  motor_A_control(HIGH, left_pwm); // 오른쪽 모터 전진
   motor_B_control(HIGH, right_pwm); // 왼쪽 모터 전진
}

void loop() {
  // 초음파 센서로부터 거리 측정 값을 읽어들임
  front_sonar = sonar[Front].ping_cm() * 10; // 전방 센서 측정
  left_sonar  = sonar[Left].ping_cm() * 10; // 좌측 센서 측정
  right_sonar = sonar[Right].ping_cm() * 10; // 우측 센서 측정

  // 센서 값이 0.0인 경우 최대 거리로 설정
  if (front_sonar == 0.0) front_sonar = MAX_DISTANCE * 10; // 0.0 출력이 최대값이므로
  if (left_sonar  == 0.0) left_sonar = MAX_DISTANCE * 10;
  if (right_sonar == 0.0) right_sonar = MAX_DISTANCE * 10;

  // 시리얼 모니터에 센서 값 출력
  Serial.print("L: "); Serial.print(left_sonar); Serial.print(" ");
  Serial.print("F: "); Serial.print(front_sonar); Serial.print(" ");
  Serial.print("R: "); Serial.println(right_sonar);

  check_maze_status(); // 미로 상태 확인

  // 미로 상태에 따른 동작 수행
  if (maze_status == 4) {
    Serial.println("Rotate CCW"); // 시계 반대 방향 회전
    motor_A_control(LOW, 0);
    motor_B_control(HIGH, 0);
    
    motor_A_control(LOW, 85); // 왼쪽 모터 전진
    motor_B_control(HIGH, 90); // 오른쪽 모터 후진
    delay(1500);
    
    Serial.println("Rotate CCW");
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
    
    Serial.println("Go Straight");
    motor_A_control(HIGH, 240);
    motor_B_control(HIGH, 230);
  } else if (maze_status == 1) {
    Serial.println("Run straight"); // 직진
    wall_collision_avoid(100);
  } else if (maze_status == 3) {
    Serial.println("Rotate CCW"); // 시계 반대 방향 회전
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
    
    motor_A_control(HIGH, 210); 
    motor_B_control(LOW, 160); 
    delay(700);
    
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
  } else if (maze_status == 2) {
    Serial.println("Rotate CW"); // 시계 방향 회전
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
    
    motor_A_control(LOW, 160); 
    motor_B_control(HIGH, 210); 
    delay(700);
    
    motor_A_control(HIGH, 0);
    motor_B_control(LOW, 0);
  } else {
    Serial.println("Go Straight"); // 직진
    motor_A_control(HIGH, 225);
    motor_B_control(HIGH, 230);
  }
}
